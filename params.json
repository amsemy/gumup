{"name":"Gumup","tagline":"Simple dynamic JS modules","body":"Gumup is simple JavaScript library that lets you organize your code with module-based approach.\r\nSome of the features you get with Gumup:\r\n- module-based namespaces\r\n- control over order of modules initialization\r\n- dependency injection\r\n\r\n## Basic usage\r\n\r\nInclude Gumup in your page. The library unconditionally occupies a `gumup` global.\r\n```html\r\n<script src=\"gumup.js\"></script>\r\n```\r\nDeclare your moudles using `gumup.module`. Module implementation function will called in context of created module instance.\r\n\r\n```javascript\r\ngumup.module('utils.log', implementation);\r\n\r\nfunction implementation() {\r\n\r\n    this.info = function(msg) {\r\n        log(msg).className = \"info\";\r\n    };\r\n\r\n    this.debug = function(msg) {\r\n        log(msg).className = \"debug\";\r\n    };\r\n\r\n    function log(msg) {\r\n        var p = document.createElement(\"p\");\r\n        p.innerHTML = msg;\r\n        return document.body.appendChild(p);\r\n    }\r\n\r\n}\r\n```\r\n\r\nUse `require` method of module to specify its dependencies.\r\n\r\n```javascript\r\nvar module = gumup.module('main', implementation);\r\n\r\nmodule.require('utils.log');\r\n\r\nfunction implementation(modules) {\r\n    var log = modules.utils.log;\r\n\r\n    log.info(\"Init main\");\r\n    log.debug(\"Debug message\");\r\n}\r\n```\r\n\r\nHook `gumup.init()` to the page load event. ([jsfiddle](http://jsfiddle.net/amsemy/pq3uj/))\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}